rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isDevAdmin() {
      return request.auth.token.email == 'luckyxstar1214@gmail.com';
    }
    
    function getUserRecord() {
      return get(/databases/$(database)/documents/users/$(request.auth.token.email));
    }
    
    function hasRole(role) {
      return isDevAdmin() || (isAuthenticated() && getUserRecord().data.role == role);
    }
    
    function hasPermission(category, action) {
      return isDevAdmin() || 
        (isAuthenticated() && 
         getUserRecord().data.isActive == true &&
         getUserRecord().data.permissions[category][action] == true);
    }
    
    function isActiveUser() {
      return isDevAdmin() || 
        (isAuthenticated() && getUserRecord().data.isActive == true);
    }

    // Users collection - DevAdmin and managers for HR, users can read their own record
    match /users/{email} {
      allow read: if isDevAdmin() || hasRole('manager') || (isAuthenticated() && request.auth.token.email == email);
      allow write: if isDevAdmin() || hasRole('manager') || (isAuthenticated() && request.auth.token.email == email);
      allow list: if isDevAdmin() || hasRole('manager');
      allow create: if isDevAdmin() || hasRole('manager');
    }
    
    // Inventory counts - role-based access
    match /inventory_counts/{document} {
      allow read: if isActiveUser() && hasPermission('inventory', 'view');
      allow create, update: if isActiveUser() && hasPermission('inventory', 'count');
      allow delete: if isDevAdmin() || hasPermission('inventory', 'delete');
    }
    
    // Transactions - role-based access
    match /transactions/{document} {
      allow read: if isActiveUser() && hasPermission('transactions', 'view');
      allow create: if isActiveUser() && hasPermission('transactions', 'create');
      allow update: if isActiveUser() && (
        hasPermission('transactions', 'approve') ||
        hasPermission('transactions', 'cancel') ||
        hasRole('manager') || hasRole('supervisor')
      );
      allow delete: if isDevAdmin();
    }
    
    // Transaction OTPs - sensitive, manager+ only
    match /transaction_otps/{document} {
      allow read, write: if isDevAdmin() || hasRole('manager') || hasRole('supervisor');
    }
    
    // Expected inventory - calculated data, manager+ read/write, logistics can add scanned items
    match /expected_inventory/{document} {
      allow read: if isActiveUser() && hasPermission('inventory', 'view');
      allow write: if isDevAdmin() || hasRole('manager') ||
        (hasRole('logistics') && hasPermission('inventory', 'count'));
    }
    
    // Expected inventory (camelCase) - for batch health calculations
    match /expectedInventory/{document} {
      allow read: if isActiveUser();  // All authenticated users can read for health calculations
      allow write: if isDevAdmin() || hasRole('manager');
    }
    
    // Yesterday results - historical data, manager+ read/write
    match /yesterday_results/{document} {
      allow read: if isActiveUser() && hasPermission('inventory', 'view');
      allow write: if isDevAdmin() || hasRole('manager');
    }
    
    // Item master list - role-based CRUD
    match /item_master/{document} {
      allow read: if isActiveUser() && (hasRole('manager') || hasRole('supervisor') || hasRole('logistics') || hasRole('production') || hasRole('qa') || hasRole('viewer') || hasPermission('itemMaster', 'view'));
      allow create: if isDevAdmin() || hasRole('manager') || (isActiveUser() && hasPermission('itemMaster', 'add'));
      allow update: if isDevAdmin() || hasRole('manager') || (isActiveUser() && hasPermission('itemMaster', 'edit'));
      allow delete: if isDevAdmin() || hasPermission('itemMaster', 'delete');
    }
    
    // BOMs - role-based CRUD
    match /boms/{document} {
      allow read: if isActiveUser() && hasPermission('bom', 'view');
      allow create: if isActiveUser() && hasPermission('bom', 'create');
      allow update: if isActiveUser() && hasPermission('bom', 'edit');
      allow delete: if isDevAdmin() || hasPermission('bom', 'delete');
    }
    
    // Audit logs - read-only for authorized users, write for system
    match /audit_logs/{document} {
      allow read: if isDevAdmin() || hasPermission('system', 'auditLogs');
      allow write: if isDevAdmin();
    }
    
    // System settings - DevAdmin only
    match /system_settings/{document} {
      allow read, write: if isDevAdmin();
    }
    
    // Scanner configurations - v3.2 future feature
    match /scanner_config/{document} {
      allow read: if isActiveUser() && hasPermission('scanner', 'use');
      allow write: if isDevAdmin() || hasPermission('scanner', 'admin');
    }
    
    // Scanner lookup table - SKU to zone mapping for v3.2.0
    match /scanLookups/{document} {
      allow read: if isActiveUser();  // All authenticated users can read scan lookups
      allow write: if isDevAdmin() || hasRole('manager');  // Only managers can modify lookup table
    }
    
    // Version 4.0 Collections - Car Tracking and Production Line Management
    
    // Cars collection - Production line car tracking
    match /cars/{vin} {
      allow read: if isActiveUser();  // All authenticated users can read car data
      allow create: if isActiveUser() && (
        hasRole('production') || hasRole('logistics') || 
        hasRole('supervisor') || hasRole('manager')
      );
      allow update: if isActiveUser() && (
        hasRole('production') || hasRole('logistics') || 
        hasRole('supervisor') || hasRole('manager')
      );
      allow delete: if isDevAdmin() || hasRole('manager');
    }
    
    // Car movements - Audit trail for car movements
    match /carMovements/{document} {
      allow read: if isActiveUser();  // All users can read movement history
      allow create: if isActiveUser() && (
        hasRole('production') || hasRole('logistics') || 
        hasRole('supervisor') || hasRole('manager')
      );
      allow update, delete: if isDevAdmin() || hasRole('manager');  // Only managers can modify audit trail
    }
    
    // Work stations - Zone status and real-time info
    match /workStations/{zoneId} {
      allow read: if isActiveUser();  // All users can read station status
      allow create, update: if isActiveUser() && (
        hasRole('production') || hasRole('logistics') || 
        hasRole('supervisor') || hasRole('manager')
      );
      allow delete: if isDevAdmin();
    }
    
    // Worker activities - Clock in/out tracking
    match /workerActivities/{document} {
      allow read: if isActiveUser() && (
        // Workers can read their own activities, managers can read all
        resource.data.workerEmail == request.auth.token.email ||
        hasRole('supervisor') || hasRole('manager')
      );
      allow create: if isActiveUser() && (
        hasRole('production') || hasRole('logistics') ||
        hasRole('supervisor') || hasRole('manager')
      );
      allow update: if isActiveUser() && (
        // Workers can update their own activities, managers can update all
        resource.data.workerEmail == request.auth.token.email ||
        hasRole('supervisor') || hasRole('manager')
      );
      allow delete: if isDevAdmin() || hasRole('manager');
    }
    
    // Production statistics - Manager dashboard data
    match /productionStats/{document} {
      allow read: if isActiveUser() && (
        hasRole('supervisor') || hasRole('manager') || hasRole('viewer')
      );
      allow write: if isDevAdmin() || hasRole('manager');
    }
    
    // Version 5.4 Collections - Ela AI Assistant (Chat with Ela)
    
    // Ela conversations - Worker feedback conversations
    match /elaConversations/{document} {
      allow read: if isActiveUser();  // All authenticated users can read conversations
      allow create: if isActiveUser();  // All users can start conversations
      allow update: if isActiveUser() && (
        // Users can update their own conversations, managers can update all
        resource.data.userId == request.auth.uid ||
        hasRole('manager') || hasRole('supervisor')
      );
      allow delete: if isDevAdmin() || hasRole('manager');
    }
    
    // Ela messages - Individual chat messages
    match /elaMessages/{document} {
      allow read: if isActiveUser();  // All authenticated users can read messages
      allow create: if isActiveUser();  // All users can send messages
      allow update: if isDevAdmin() || hasRole('manager');  // Only managers can edit messages
      allow delete: if isDevAdmin() || hasRole('manager');  // Only managers can delete messages
    }
    
    // Ela summaries - AI-generated conversation summaries for managers
    match /elaSummaries/{document} {
      allow read: if isActiveUser() && (
        hasRole('supervisor') || hasRole('manager') || hasRole('viewer')
      );
      allow write: if isDevAdmin() || hasRole('manager');  // Only managers can generate summaries
    }
    
    // Version 5.3 Collections - Batch Management System (Eugene Section 5.3)
    
    // Car types - Master list of car type definitions (v7.19.0: Logistics can manage)
    match /carTypes/{carCode} {
      allow read: if isActiveUser();  // All authenticated users can read car types
      allow write: if isDevAdmin() || hasRole('manager') || hasRole('logistics');  // Managers and logistics can modify car types
    }
    
    // Batches - Production batch definitions and tracking
    match /batches/{batchId} {
      allow read: if isActiveUser();  // All authenticated users can read batch info
      allow write: if isDevAdmin() || hasRole('manager');  // Only managers can modify batches
    }
    
    // Zone BOM mappings - Links zones to BOMs for specific car types
    match /zoneBOMMappings/{mappingId} {
      allow read: if isActiveUser();  // All authenticated users can read mappings
      allow write: if isDevAdmin() || hasRole('manager');  // Only managers can modify mappings
    }
    
    // Batch health checks - Batch feasibility analysis results
    match /batchHealthChecks/{document} {
      allow read: if isActiveUser() && (
        hasRole('supervisor') || hasRole('manager') || hasRole('viewer')
      );
      allow write: if isDevAdmin() || hasRole('manager');  // Only managers can perform health checks
    }
    
    // VIN plans - Individual VIN to batch and car type mappings
    match /vin_plans/{document} {
      allow read: if isActiveUser();  // All authenticated users can read VIN plans
      allow write: if isDevAdmin() || hasRole('manager');  // Only managers can modify VIN plans
    }
    
    // Batch receipts - Packing list and component receipt tracking
    match /batch_receipts/{document} {
      allow read: if isActiveUser();  // All authenticated users can read receipts
      allow write: if isDevAdmin() || hasRole('manager') || hasRole('logistics');  // Managers and logistics can add receipts
    }
    
    // Batch requirements - Smart tracking of remaining materials per batch
    match /batchRequirements/{document} {
      allow read: if isActiveUser();  // All authenticated users can read requirements
      allow write: if isDevAdmin() || hasRole('manager');  // Only managers can modify requirements
    }

    // Version 6.5.0 Collections - Batch Allocation System (Eugene Section 6.1)

    // Batch allocations - Parallel tracking of inventory by batch
    match /batchAllocations/{document} {
      allow read: if isActiveUser();  // All authenticated users can read batch allocations
      allow create: if isActiveUser() && (
        hasRole('logistics') || hasRole('production') ||
        hasRole('supervisor') || hasRole('manager')
      );
      allow update: if isActiveUser() && (
        hasRole('logistics') || hasRole('production') ||
        hasRole('supervisor') || hasRole('manager')
      );
      allow delete: if isDevAdmin() || hasRole('manager');
    }

    // Batch configuration - Manager controls for batch allocation system
    match /batchConfig/{document} {
      allow read: if isActiveUser();  // All authenticated users can read batch config
      allow write: if isDevAdmin() || hasRole('manager');  // Only managers can modify batch config
    }
    
    // Version 5.7 Collections - Worker Report System
    
    // Worker reports - Production worker alert system
    match /workerReports/{document} {
      allow read: if isActiveUser();  // All authenticated users can read reports
      allow create: if isActiveUser() && (
        hasRole('production') || hasRole('logistics') || 
        hasRole('supervisor') || hasRole('manager')
      );
      allow update: if isActiveUser() && (
        // Only allow dismissing reports (status update)
        hasRole('supervisor') || hasRole('manager') || hasRole('viewer')
      );
      allow delete: if isDevAdmin() || hasRole('manager');
    }
    
    // Version 6.3.3 Collections - Tool Check Task System
    
    // Tool check configurations - Manager-created tool check templates
    match /toolCheckConfigs/{configId} {
      allow read: if isActiveUser();  // All authenticated users can read tool check configs
      allow write: if isDevAdmin() || hasRole('manager');  // Only managers can create/modify tool check configs
    }
    
    // Tool check submissions - Worker submissions of tool counts
    match /toolCheckSubmissions/{submissionId} {
      allow read: if isActiveUser();  // All authenticated users can read submissions
      allow create: if isActiveUser() && (
        hasRole('production') || hasRole('logistics') || 
        hasRole('supervisor') || hasRole('manager')
      );
      allow update: if isActiveUser() && (
        // Workers can update their own submissions, managers can update all
        resource.data.workerEmail == request.auth.token.email ||
        hasRole('supervisor') || hasRole('manager')
      );
      allow delete: if isDevAdmin() || hasRole('manager');
    }
    
    // Tasks collection - Enhanced task system with tool check integration
    match /tasks/{taskId} {
      allow read: if isActiveUser();  // All authenticated users can read tasks
      allow create: if isDevAdmin() || hasRole('manager');  // Only managers can create tasks
      allow update: if isActiveUser() && (
        // Workers can update task status, managers can update all fields
        hasRole('production') || hasRole('logistics') ||
        hasRole('supervisor') || hasRole('manager')
      );
      allow delete: if isDevAdmin() || hasRole('manager');
    }

    // Waste reports collection - Individual waste/lost/defect report tracking
    match /waste_reports/{document} {
      allow read: if isActiveUser();  // All authenticated users can read waste reports
      allow create: if isActiveUser() && (
        hasRole('production') || hasRole('logistics') ||
        hasRole('supervisor') || hasRole('manager')
      );
      allow update: if isActiveUser() && (
        // Only managers and supervisors can update existing reports
        hasRole('supervisor') || hasRole('manager')
      );
      allow delete: if isDevAdmin() || hasRole('manager');
    }

    // Translation Chat Collections - Multilingual Communication System

    // Translation channels - 5-channel translation chat system
    match /translationChannels/{channelId} {
      allow read: if isActiveUser();  // All authenticated users can read channel status
      allow create, update: if isActiveUser();  // All users can join/leave channels
      allow delete: if isDevAdmin() || hasRole('manager');  // Only admins can delete channels
    }

    // Channel messages - Translation chat messages
    match /channelMessages/{messageId} {
      allow read: if isActiveUser();  // All authenticated users can read messages
      allow create: if isActiveUser();  // All users can send messages
      allow update: if isDevAdmin() || hasRole('manager');  // Only admins can edit messages
      allow delete: if isDevAdmin() || hasRole('manager');  // Only admins can delete messages
    }

    // Packing Boxes - Box-level packing list tracking per batch
    match /packingBoxes/{boxId} {
      allow read: if isActiveUser();  // All authenticated users can read packing boxes
      allow write: if isDevAdmin() || hasRole('manager') || hasRole('logistics');  // Managers and logistics can manage boxes

      // Scan events subcollection
      match /scans/{scanId} {
        allow read: if isActiveUser();  // All users can read scan history
        allow create: if isActiveUser() && (
          hasRole('logistics') || hasRole('production') ||
          hasRole('supervisor') || hasRole('manager')
        );
        allow update, delete: if isDevAdmin() || hasRole('manager');
      }
    }

    // Supplier Box Scans - QR tracking to prevent double-counting (Version 7.8.0)
    match /supplierBoxScans/{scanId} {
      allow read: if isActiveUser();  // All authenticated users can read scan records
      allow create: if isActiveUser() && (
        hasRole('logistics') || hasRole('production') ||
        hasRole('supervisor') || hasRole('manager')
      );
      allow update, delete: if isDevAdmin() || hasRole('manager');  // Only managers can modify/delete scans
    }

    // Car Inspection QA System - Vehicle quality inspection tracking

    // Inspection templates - Master checklists for car inspections
    match /inspectionTemplates/{templateId} {
      allow read: if isActiveUser();  // All authenticated users can read templates
      allow write: if isDevAdmin() || hasRole('manager');  // Only managers can create/modify templates
    }

    // Car inspections - Individual car inspection records
    match /carInspections/{inspectionId} {
      allow read: if isActiveUser();  // All authenticated users can read inspections
      allow create: if isActiveUser() && (
        hasRole('qa') || hasRole('supervisor') || hasRole('manager')
      );
      allow update: if isActiveUser() && (
        // QA workers can update inspections they're working on
        hasRole('qa') || hasRole('supervisor') || hasRole('manager')
      );
      allow delete: if isDevAdmin() || hasRole('manager');

      // Inspection photos subcollection (optional future feature)
      match /photos/{photoId} {
        allow read: if isActiveUser();
        allow create: if isActiveUser() && hasRole('qa');
        allow delete: if isDevAdmin() || hasRole('manager');
      }
    }

    // ========================================
    // ATTENDANCE DASHBOARD COLLECTIONS
    // (Used by attendance-dashboard-react app)
    // ========================================

    // Helper function for attendance dashboard: Check if user is attendance devadmin
    function isAttendanceDevAdmin() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/attendance_users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/attendance_users/$(request.auth.uid)).data.role == 'devadmin';
    }

    // Helper function for attendance dashboard: Check if user is attendance manager
    function isAttendanceManager() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/attendance_users/$(request.auth.uid)) &&
             (get(/databases/$(database)/documents/attendance_users/$(request.auth.uid)).data.role == 'manager' ||
              get(/databases/$(database)/documents/attendance_users/$(request.auth.uid)).data.role == 'devadmin');
    }

    // Attendance Users collection
    match /attendance_users/{userId} {
      // Allow authenticated users to read their own document
      allow read: if isAuthenticated() && request.auth.uid == userId;
      // Allow authenticated users to query all documents (needed for email-based lookup)
      allow list: if isAuthenticated();
      // Allow users to create their own account
      allow create: if isAuthenticated() && (request.auth.uid == userId || request.resource.data.email == request.auth.token.email);
      // Devadmin can do everything
      allow read, list, create, update, delete: if isAttendanceDevAdmin();
    }

    // Months collection - Attendance managers can read/write
    match /months/{monthId} {
      allow read, write: if isAttendanceManager();
    }

    // Attendance records - Attendance managers can read/write
    match /attendanceRecords/{monthId}/{document=**} {
      allow read, write: if isAttendanceManager();
    }

    // HR Modifications - Attendance managers can read/write
    match /modifications/{monthId}/{document=**} {
      allow read, write: if isAttendanceManager();
    }

    // Global config - Attendance managers can read/write
    match /config/{configId} {
      allow read, write: if isAttendanceManager();
    }

    // Grid Cache - Attendance managers can read/write
    match /gridCache/{monthId}/workers/{workerId} {
      allow read, write: if isAttendanceManager();
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}